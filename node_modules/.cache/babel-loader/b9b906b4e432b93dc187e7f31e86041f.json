{"ast":null,"code":"var _jsxFileName = \"/Users/kasjan/Desktop/Projekty/pw/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useMediaQuery } from 'react-responsive';\nimport './Grid.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = _ref => {\n  _s();\n\n  let {\n    title,\n    items,\n    svg\n  } = _ref;\n  const [itemsInState, setItemsInState] = useState(items);\n  const isMobile = useMediaQuery({\n    query: '(max-width: 575px)'\n  });\n  const isBreakpointS = useMediaQuery({\n    query: '(min-width: 576px)'\n  });\n  const isBreakpointM = useMediaQuery({\n    query: '(min-width: 768px)'\n  });\n  useEffect(() => {\n    const emptyItem = {\n      empty: true\n    };\n\n    if (isBreakpointM && items.length % 4 !== 0) {\n      const emptyItems = Array(4 - Math.ceil(items.length % 4)).fill(emptyItem);\n      setItemsInState([...items, ...emptyItems]);\n    } else if (isBreakpointS && items.length % 3 !== 0) {\n      const emptyItems = Array(3 - Math.ceil(items.length % 3)).fill(emptyItem);\n      setItemsInState([...items, ...emptyItems]);\n    } else if (isMobile && items.length % 2 !== 0) setItemsInState([...items, emptyItem]);\n  }, [isBreakpointM, isBreakpointS, isMobile]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [title, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-wrapper\",\n      children: itemsInState.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: !item.empty && /*#__PURE__*/_jsxDEV(\"a\", {\n          href: item.href,\n          name: item.name,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          className: \"grid-image\",\n          children: [!svg && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"grid-image__png\",\n            src: item.src,\n            alt: item.alt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 26\n          }, this), svg && (item.localFile ? /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"grid-image__svg\",\n            src: item.src,\n            alt: item.alt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 43\n          }, this) : item.src)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Grid, \"5NDec0Dr44zL32VOWYeJ6Ry34ic=\", false, function () {\n  return [useMediaQuery, useMediaQuery, useMediaQuery];\n});\n\n_c = Grid;\nGrid.propTypes = {\n  title: PropTypes.node.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  svg: PropTypes.bool.isRequired\n};\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","Fragment","PropTypes","useMediaQuery","Grid","title","items","svg","itemsInState","setItemsInState","isMobile","query","isBreakpointS","isBreakpointM","emptyItem","empty","length","emptyItems","Array","Math","ceil","fill","map","item","href","name","src","alt","localFile","id","propTypes","node","isRequired","arrayOf","shape","bool"],"sources":["/Users/kasjan/Desktop/Projekty/pw/src/components/Grid.js"],"sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useMediaQuery } from 'react-responsive';\n\nimport './Grid.scss';\n\nconst Grid = ({ title, items, svg }) => {\n  const [itemsInState, setItemsInState] = useState(items);\n\n  const isMobile = useMediaQuery({\n    query: '(max-width: 575px)',\n  });\n\n  const isBreakpointS = useMediaQuery({\n    query: '(min-width: 576px)',\n  });\n\n  const isBreakpointM = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n\n  useEffect(() => {\n    const emptyItem = { empty: true };\n\n    if (isBreakpointM && items.length % 4 !== 0) {\n      const emptyItems = Array(4 - Math.ceil(items.length % 4)).fill(emptyItem);\n\n      setItemsInState([...items, ...emptyItems]);\n    } else if (isBreakpointS && items.length % 3 !== 0) {\n      const emptyItems = Array(3 - Math.ceil(items.length % 3)).fill(emptyItem);\n\n      setItemsInState([...items, ...emptyItems]);\n    } else if (isMobile && items.length % 2 !== 0) setItemsInState([...items, emptyItem]);\n  }, [isBreakpointM, isBreakpointS, isMobile]);\n\n  return (\n    <Fragment>\n      {title}\n      <div className=\"grid-wrapper\">\n        {itemsInState.map((item) => (\n          <div className=\"grid-item\" key={item.id}>\n            {!item.empty && (\n              <a href={item.href} name={item.name} target=\"_blank\" rel=\"noreferrer\" className=\"grid-image\">\n                {!svg && <img className=\"grid-image__png\" src={item.src} alt={item.alt} />}\n                {svg && (item.localFile ? <img className=\"grid-image__svg\" src={item.src} alt={item.alt} /> : item.src)}\n              </a>\n            )}\n          </div>\n        ))}\n      </div>\n    </Fragment>\n  );\n};\n\nGrid.propTypes = {\n  title: PropTypes.node.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  svg: PropTypes.bool.isRequired,\n};\n\nexport default Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}